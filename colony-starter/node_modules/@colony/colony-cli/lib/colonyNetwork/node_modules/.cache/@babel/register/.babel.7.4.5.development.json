{
  "{\"sourceRoot\":\"/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork\",\"filename\":\"/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers/upgradable-contracts.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork\",\"plugins\":[{\"key\":\"/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/node_modules/babel-plugin-istanbul/lib/index.js\",\"visitor\":{\"Program\":{\"enter\":[null],\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork",
      "filename": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers/upgradable-contracts.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/node_modules/babel-plugin-istanbul/lib/index.js",
          "visitor": {
            "Program": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers/upgradable-contracts.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers/upgradable-contracts.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers",
        "sourceFileName": "upgradable-contracts.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseImplementation = parseImplementation;\nexports.setupEtherRouter = setupEtherRouter;\nexports.setupColonyVersionResolver = setupColonyVersionResolver;\nexports.setupUpgradableColonyNetwork = setupUpgradableColonyNetwork;\nexports.setupUpgradableTokenLocking = setupUpgradableTokenLocking;\nexports.setupReputationMiningCycleResolver = setupReputationMiningCycleResolver;\nexports.setupENSRegistrar = setupENSRegistrar;\n\nvar _web3Utils = require(\"web3-utils\");\n\nvar _ethEnsNamehash = _interopRequireDefault(require(\"eth-ens-namehash\"));\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction parseImplementation(contractName, functionsToResolve, deployedImplementations) {\n  // Goes through a contract, and sees if anything in it is in the interface. If it is, then wire up the resolver to point at it\n  var _JSON$parse = JSON.parse(_fs[\"default\"].readFileSync(\"./build/contracts/\".concat(contractName, \".json\"))),\n      abi = _JSON$parse.abi;\n\n  abi.map(function (value) {\n    var fName = value.name;\n\n    if (functionsToResolve[fName]) {\n      if (functionsToResolve[fName].definedIn !== \"\") {\n        // It's a Friday afternoon, and I can't be bothered to deal with same name, different signature.\n        // Let's just resolve to not do it? We'd probably just trip ourselves up later.\n        // eslint-disable-next-line no-console\n        console.log(\"What are you doing!? Defining functions with the same name in different files!? You are going to do yourself a mischief. \", \"You seem to have two \", fName, \" in \", contractName, \"and \", functionsToResolve[fName].definedIn);\n        process.exit(1);\n      }\n\n      functionsToResolve[fName].definedIn = deployedImplementations[contractName]; // eslint-disable-line no-param-reassign\n    }\n\n    return functionsToResolve[fName];\n  });\n}\n\nfunction setupEtherRouter(_x, _x2, _x3) {\n  return _setupEtherRouter.apply(this, arguments);\n}\n\nfunction _setupEtherRouter() {\n  _setupEtherRouter = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(interfaceContract, deployedImplementations, resolver) {\n    var functionsToResolve, iAbi, i, fName, sig, address, sigHash, destination;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            functionsToResolve = {}; // Load ABI of the interface of the contract we're trying to stich together\n\n            iAbi = JSON.parse(_fs[\"default\"].readFileSync(\"./build/contracts/\".concat(interfaceContract, \".json\"), \"utf8\")).abi;\n            iAbi.map(function (value) {\n              var fName = value.name;\n              var fType = value.type; // These are from DSAuth, and so are on EtherRouter itself without any more help.\n\n              if (fName !== \"authority\" && fName !== \"owner\") {\n                // We only care about functions.\n                if (fType === \"function\") {\n                  // Gets the types of the parameters, which is all we care about for function signatures.\n                  var fInputs = value.inputs.map(function (parameter) {\n                    return parameter.type;\n                  }); // Record function name\n\n                  functionsToResolve[fName] = {\n                    inputs: fInputs,\n                    definedIn: \"\"\n                  };\n                }\n              }\n\n              return functionsToResolve;\n            });\n            Object.keys(deployedImplementations).map(function (name) {\n              return parseImplementation(name, functionsToResolve, deployedImplementations);\n            });\n            i = 0;\n\n          case 5:\n            if (!(i < Object.keys(functionsToResolve).length)) {\n              _context.next = 21;\n              break;\n            }\n\n            // We do it like this rather than a nice await Promise.all on a mapped array of promises because of\n            // https://github.com/paritytech/parity-ethereum/issues/9155\n            fName = Object.keys(functionsToResolve)[i];\n            sig = \"\".concat(fName, \"(\").concat(functionsToResolve[fName].inputs.join(\",\"), \")\");\n            address = functionsToResolve[fName].definedIn;\n            _context.next = 11;\n            return (0, _web3Utils.soliditySha3)(sig).substr(0, 10);\n\n          case 11:\n            sigHash = _context.sent;\n            _context.next = 14;\n            return resolver.register(sig, address);\n\n          case 14:\n            _context.next = 16;\n            return resolver.lookup(sigHash);\n\n          case 16:\n            destination = _context.sent;\n\n            _assert[\"default\"].equal(destination, address, \"\".concat(sig, \" has not been registered correctly. Is it defined?\"));\n\n          case 18:\n            i += 1;\n            _context.next = 5;\n            break;\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _setupEtherRouter.apply(this, arguments);\n}\n\nfunction setupColonyVersionResolver(_x4, _x5, _x6, _x7, _x8, _x9) {\n  return _setupColonyVersionResolver.apply(this, arguments);\n}\n\nfunction _setupColonyVersionResolver() {\n  _setupColonyVersionResolver = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(colony, colonyTask, colonyPayment, colonyFunding, contractRecovery, resolver) {\n    var deployedImplementations;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            deployedImplementations = {};\n            deployedImplementations.Colony = colony.address;\n            deployedImplementations.ColonyTask = colonyTask.address;\n            deployedImplementations.ColonyPayment = colonyPayment.address;\n            deployedImplementations.ColonyFunding = colonyFunding.address;\n            deployedImplementations.ContractRecovery = contractRecovery.address;\n            _context2.next = 8;\n            return setupEtherRouter(\"IMetaColony\", deployedImplementations, resolver);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _setupColonyVersionResolver.apply(this, arguments);\n}\n\nfunction setupUpgradableColonyNetwork(_x10, _x11, _x12, _x13, _x14, _x15, _x16) {\n  return _setupUpgradableColonyNetwork.apply(this, arguments);\n}\n\nfunction _setupUpgradableColonyNetwork() {\n  _setupUpgradableColonyNetwork = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(etherRouter, resolver, colonyNetwork, colonyNetworkMining, colonyNetworkAuction, colonyNetworkENS, contractRecovery) {\n    var deployedImplementations;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            deployedImplementations = {};\n            deployedImplementations.ColonyNetwork = colonyNetwork.address;\n            deployedImplementations.ColonyNetworkMining = colonyNetworkMining.address;\n            deployedImplementations.ColonyNetworkAuction = colonyNetworkAuction.address;\n            deployedImplementations.ColonyNetworkENS = colonyNetworkENS.address;\n            deployedImplementations.ContractRecovery = contractRecovery.address;\n            _context3.next = 8;\n            return setupEtherRouter(\"IColonyNetwork\", deployedImplementations, resolver);\n\n          case 8:\n            _context3.next = 10;\n            return etherRouter.setResolver(resolver.address);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _setupUpgradableColonyNetwork.apply(this, arguments);\n}\n\nfunction setupUpgradableTokenLocking(_x17, _x18, _x19) {\n  return _setupUpgradableTokenLocking.apply(this, arguments);\n}\n\nfunction _setupUpgradableTokenLocking() {\n  _setupUpgradableTokenLocking = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(etherRouter, resolver, tokenLocking) {\n    var deployedImplementations, registeredResolver;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            deployedImplementations = {};\n            deployedImplementations.TokenLocking = tokenLocking.address;\n            _context4.next = 4;\n            return setupEtherRouter(\"ITokenLocking\", deployedImplementations, resolver);\n\n          case 4:\n            _context4.next = 6;\n            return etherRouter.setResolver(resolver.address);\n\n          case 6:\n            _context4.next = 8;\n            return etherRouter.resolver();\n\n          case 8:\n            registeredResolver = _context4.sent;\n\n            _assert[\"default\"].equal(registeredResolver, resolver.address);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _setupUpgradableTokenLocking.apply(this, arguments);\n}\n\nfunction setupReputationMiningCycleResolver(_x20, _x21, _x22, _x23) {\n  return _setupReputationMiningCycleResolver.apply(this, arguments);\n}\n\nfunction _setupReputationMiningCycleResolver() {\n  _setupReputationMiningCycleResolver = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(reputationMiningCycle, reputationMiningCycleRespond, resolver, colonyNetwork) {\n    var deployedImplementations;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            deployedImplementations = {};\n            deployedImplementations.ReputationMiningCycle = reputationMiningCycle.address;\n            deployedImplementations.ReputationMiningCycleRespond = reputationMiningCycleRespond.address;\n            _context5.next = 5;\n            return setupEtherRouter(\"IReputationMiningCycle\", deployedImplementations, resolver);\n\n          case 5:\n            _context5.next = 7;\n            return colonyNetwork.setMiningResolver(resolver.address);\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _setupReputationMiningCycleResolver.apply(this, arguments);\n}\n\nfunction setupENSRegistrar(_x24, _x25, _x26) {\n  return _setupENSRegistrar.apply(this, arguments);\n}\n\nfunction _setupENSRegistrar() {\n  _setupENSRegistrar = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6(colonyNetwork, ensRegistry, registrarOwner) {\n    var rootNode, USER_HASH, COLONY_HASH;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            rootNode = _ethEnsNamehash[\"default\"].hash(\"joincolony.eth\");\n            USER_HASH = (0, _web3Utils.soliditySha3)(\"user\");\n            COLONY_HASH = (0, _web3Utils.soliditySha3)(\"colony\");\n            _context6.next = 5;\n            return colonyNetwork.setupRegistrar(ensRegistry.address, rootNode);\n\n          case 5:\n            _context6.next = 7;\n            return ensRegistry.setOwner(rootNode, registrarOwner);\n\n          case 7:\n            _context6.next = 9;\n            return ensRegistry.setSubnodeOwner(rootNode, USER_HASH, colonyNetwork.address);\n\n          case 9:\n            _context6.next = 11;\n            return ensRegistry.setSubnodeOwner(rootNode, COLONY_HASH, colonyNetwork.address);\n\n          case 11:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _setupENSRegistrar.apply(this, arguments);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "upgradable-contracts.js"
      ],
      "names": [
        "parseImplementation",
        "contractName",
        "functionsToResolve",
        "deployedImplementations",
        "JSON",
        "parse",
        "fs",
        "readFileSync",
        "abi",
        "map",
        "value",
        "fName",
        "name",
        "definedIn",
        "console",
        "log",
        "process",
        "exit",
        "setupEtherRouter",
        "interfaceContract",
        "resolver",
        "iAbi",
        "fType",
        "type",
        "fInputs",
        "inputs",
        "parameter",
        "Object",
        "keys",
        "i",
        "length",
        "sig",
        "join",
        "address",
        "substr",
        "sigHash",
        "register",
        "lookup",
        "destination",
        "assert",
        "equal",
        "setupColonyVersionResolver",
        "colony",
        "colonyTask",
        "colonyPayment",
        "colonyFunding",
        "contractRecovery",
        "Colony",
        "ColonyTask",
        "ColonyPayment",
        "ColonyFunding",
        "ContractRecovery",
        "setupUpgradableColonyNetwork",
        "etherRouter",
        "colonyNetwork",
        "colonyNetworkMining",
        "colonyNetworkAuction",
        "colonyNetworkENS",
        "ColonyNetwork",
        "ColonyNetworkMining",
        "ColonyNetworkAuction",
        "ColonyNetworkENS",
        "setResolver",
        "setupUpgradableTokenLocking",
        "tokenLocking",
        "TokenLocking",
        "registeredResolver",
        "setupReputationMiningCycleResolver",
        "reputationMiningCycle",
        "reputationMiningCycleRespond",
        "ReputationMiningCycle",
        "ReputationMiningCycleRespond",
        "setMiningResolver",
        "setupENSRegistrar",
        "ensRegistry",
        "registrarOwner",
        "rootNode",
        "namehash",
        "hash",
        "USER_HASH",
        "COLONY_HASH",
        "setupRegistrar",
        "setOwner",
        "setSubnodeOwner"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/jamil/myprojects/colonyStarter/colony-starter/node_modules/@colony/colony-cli/lib/colonyNetwork/helpers",
      "sourcesContent": [
        "import { soliditySha3 } from \"web3-utils\";\nimport namehash from \"eth-ens-namehash\";\nimport assert from \"assert\";\nimport fs from \"fs\";\n\nexport function parseImplementation(contractName, functionsToResolve, deployedImplementations) {\n  // Goes through a contract, and sees if anything in it is in the interface. If it is, then wire up the resolver to point at it\n  const { abi } = JSON.parse(fs.readFileSync(`./build/contracts/${contractName}.json`));\n  abi.map(value => {\n    const fName = value.name;\n    if (functionsToResolve[fName]) {\n      if (functionsToResolve[fName].definedIn !== \"\") {\n        // It's a Friday afternoon, and I can't be bothered to deal with same name, different signature.\n        // Let's just resolve to not do it? We'd probably just trip ourselves up later.\n        // eslint-disable-next-line no-console\n        console.log(\n          \"What are you doing!? Defining functions with the same name in different files!? You are going to do yourself a mischief. \",\n          \"You seem to have two \",\n          fName,\n          \" in \",\n          contractName,\n          \"and \",\n          functionsToResolve[fName].definedIn\n        );\n        process.exit(1);\n      }\n      functionsToResolve[fName].definedIn = deployedImplementations[contractName]; // eslint-disable-line no-param-reassign\n    }\n    return functionsToResolve[fName];\n  });\n}\n\nexport async function setupEtherRouter(interfaceContract, deployedImplementations, resolver) {\n  const functionsToResolve = {};\n\n  // Load ABI of the interface of the contract we're trying to stich together\n  const iAbi = JSON.parse(fs.readFileSync(`./build/contracts/${interfaceContract}.json`, \"utf8\")).abi;\n  iAbi.map(value => {\n    const fName = value.name;\n    const fType = value.type;\n    // These are from DSAuth, and so are on EtherRouter itself without any more help.\n    if (fName !== \"authority\" && fName !== \"owner\") {\n      // We only care about functions.\n      if (fType === \"function\") {\n        // Gets the types of the parameters, which is all we care about for function signatures.\n        const fInputs = value.inputs.map(parameter => parameter.type);\n        // Record function name\n        functionsToResolve[fName] = { inputs: fInputs, definedIn: \"\" };\n      }\n    }\n    return functionsToResolve;\n  });\n  Object.keys(deployedImplementations).map(name => parseImplementation(name, functionsToResolve, deployedImplementations));\n  for (let i = 0; i < Object.keys(functionsToResolve).length; i += 1) {\n    // We do it like this rather than a nice await Promise.all on a mapped array of promises because of\n    // https://github.com/paritytech/parity-ethereum/issues/9155\n    const fName = Object.keys(functionsToResolve)[i];\n    const sig = `${fName}(${functionsToResolve[fName].inputs.join(\",\")})`;\n    const address = functionsToResolve[fName].definedIn;\n    const sigHash = await soliditySha3(sig).substr(0, 10);\n    await resolver.register(sig, address);\n    const destination = await resolver.lookup(sigHash);\n    assert.equal(destination, address, `${sig} has not been registered correctly. Is it defined?`);\n  }\n}\n\nexport async function setupColonyVersionResolver(colony, colonyTask, colonyPayment, colonyFunding, contractRecovery, resolver) {\n  const deployedImplementations = {};\n  deployedImplementations.Colony = colony.address;\n  deployedImplementations.ColonyTask = colonyTask.address;\n  deployedImplementations.ColonyPayment = colonyPayment.address;\n  deployedImplementations.ColonyFunding = colonyFunding.address;\n  deployedImplementations.ContractRecovery = contractRecovery.address;\n\n  await setupEtherRouter(\"IMetaColony\", deployedImplementations, resolver);\n}\n\nexport async function setupUpgradableColonyNetwork(\n  etherRouter,\n  resolver,\n  colonyNetwork,\n  colonyNetworkMining,\n  colonyNetworkAuction,\n  colonyNetworkENS,\n  contractRecovery\n) {\n  const deployedImplementations = {};\n  deployedImplementations.ColonyNetwork = colonyNetwork.address;\n  deployedImplementations.ColonyNetworkMining = colonyNetworkMining.address;\n  deployedImplementations.ColonyNetworkAuction = colonyNetworkAuction.address;\n  deployedImplementations.ColonyNetworkENS = colonyNetworkENS.address;\n  deployedImplementations.ContractRecovery = contractRecovery.address;\n\n  await setupEtherRouter(\"IColonyNetwork\", deployedImplementations, resolver);\n\n  await etherRouter.setResolver(resolver.address);\n}\n\nexport async function setupUpgradableTokenLocking(etherRouter, resolver, tokenLocking) {\n  const deployedImplementations = {};\n  deployedImplementations.TokenLocking = tokenLocking.address;\n  await setupEtherRouter(\"ITokenLocking\", deployedImplementations, resolver);\n\n  await etherRouter.setResolver(resolver.address);\n  const registeredResolver = await etherRouter.resolver();\n  assert.equal(registeredResolver, resolver.address);\n}\n\nexport async function setupReputationMiningCycleResolver(reputationMiningCycle, reputationMiningCycleRespond, resolver, colonyNetwork) {\n  const deployedImplementations = {};\n  deployedImplementations.ReputationMiningCycle = reputationMiningCycle.address;\n  deployedImplementations.ReputationMiningCycleRespond = reputationMiningCycleRespond.address;\n\n  await setupEtherRouter(\"IReputationMiningCycle\", deployedImplementations, resolver);\n\n  await colonyNetwork.setMiningResolver(resolver.address);\n}\n\nexport async function setupENSRegistrar(colonyNetwork, ensRegistry, registrarOwner) {\n  const rootNode = namehash.hash(\"joincolony.eth\");\n  const USER_HASH = soliditySha3(\"user\");\n  const COLONY_HASH = soliditySha3(\"colony\");\n\n  await colonyNetwork.setupRegistrar(ensRegistry.address, rootNode);\n  await ensRegistry.setOwner(rootNode, registrarOwner);\n\n  await ensRegistry.setSubnodeOwner(rootNode, USER_HASH, colonyNetwork.address);\n  await ensRegistry.setSubnodeOwner(rootNode, COLONY_HASH, colonyNetwork.address);\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1563545198835
  }
}
{"version":3,"sources":["../src/NetworkLoader.js"],"names":["NETWORKS","GOERLI","MAINNET","DEFAULT_NETWORK","LATEST_VERSION","CONTRACTS_MANIFEST","versioned","VERSIONED_CONTRACTS","Object","entries","reduce","versionedContracts","version","contractNames","assign","contracts","contractName","require","NetworkLoader","network","transform","truffleTransform","_network","query","requiredProps","networkQuery","contract","_transform","Error","ContractLoader","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;AAMA,IAAMA,WAAW;AACfC,UAAQ,QADO;AAEfC,WAAS;AAFM,CAAjB;;AAKA,IAAMC,kBAAkBH,SAASE,OAAjC;;AAIA,IAAME,iBAAiB,CAAvB;;AAEA,IAAMC,qBAAqB;AACzBC,aAAW;AACT,SAAK,CACH,aADG,EAEH,SAFG,EAGH,gBAHG,EAIH,aAJG,EAKH,WALG,EAMH,eANG,EAOH,UAPG,EAQH,iBARG,EASH,cATG,EAUH,qBAVG,EAWH,OAXG,EAYH,gBAZG,CADI;AAeT,SAAK,CACH,aADG,EAEH,SAFG,EAGH,gBAHG,EAIH,aAJG,EAKH,WALG,EAMH,eANG,EAOH,UAPG,EAQH,iBARG,EASH,cATG,EAUH,qBAVG,EAWH,OAXG,EAYH,gBAZG;AAfI;AADc,CAA3B;;AAiCA,IAAMC,sBAAsBC,OAAOC,OAAP,CAAeJ,mBAAmBC,SAAlC,EAA6CI,MAA7C,CAC1B,UAACC,kBAAD;AAAA;AAAA,MAAsBC,OAAtB;AAAA,MAA+BC,aAA/B;;AAAA,SACEL,OAAOM,MAAP,CAAcH,kBAAd,oCACGC,OADH,EACaC,cAAcH,MAAd,CACT,UAACK,SAAD,EAAYC,YAAZ;AAAA,WACER,OAAOM,MAAP,CAAcC,SAAd,oCAEGC,YAFH,EAEkBC,qCAAmCL,OAAnC,SAA8CI,YAA9C,WAFlB,EADF;AAAA,GADS,EAMT,EANS,CADb,EADF;AAAA,CAD0B,EAY1B,EAZ0B,CAA5B;;IAeME,a;;;AAGJ,2BAAsE;AAAA,oFAAJ,EAAI;AAAA,8BAAxDC,OAAwD;AAAA,QAAxDA,OAAwD,iCAA9ChB,eAA8C;;AAAA;;AAAA,4IAC9D,EAAEiB,WAAWC,wCAAb,EAD8D;;AAEpE,UAAKC,QAAL,GAAgBH,OAAhB;AAFoE;AAGrE;;;;;;YAEWI,K,uEAAgB,E;YAAIC,a;;;;;;;;AACxBL,uB,GAAU,KAAKG,QAAL,IAAiBnB,e;sCAEuBoB,K,CAAhDP,Y,EAAAA,Y,uCAAe,E,yCAAiCO,K,CAA7BX,O,EAAAA,O,kCAAUR,c;AAC/BqB,4B,GAAejB,OAAOM,MAAP,CAAc,EAAd,EAAkBS,KAAlB,EAAyB,EAAEJ,gBAAF,EAAzB,C;;;AAErB,sCAAO,CAAC,CAACH,YAAT,EAAuB,0CAAvB;AACA,sCAAO,CAAC,CAACJ,OAAT,EAAkB,2CAAlB;;AAEMc,wB,GACJnB,oBAAoBK,OAApB,KACAL,oBAAoBK,OAApB,EAA6BI,YAA7B,C;;qBAEEU,Q;;;;;iDAAiB,KAAKC,UAAL,CAAgBD,QAAhB,EAA0BD,YAA1B,EAAwCD,aAAxC,C;;;sBAEf,IAAII,KAAJ;AACJ;AADI,8BAEQZ,YAFR,sBAEqCJ,OAFrC,sBAE6DO,OAF7D,C;;;;;;;;;;;;;;;;;;EAvBkBU,gC;;AA8B5BC,OAAOC,OAAP,GAAiBb,aAAjB","file":"NetworkLoader.js","sourcesContent":["/* @flow */\n\nimport assert from 'assert';\nimport ContractLoader, {\n  truffleTransform,\n} from '@colony/colony-js-contract-loader';\n\nimport type { RequiredContractProps } from '@colony/colony-js-contract-loader';\n\nconst NETWORKS = {\n  GOERLI: 'goerli',\n  MAINNET: 'mainnet',\n};\n\nconst DEFAULT_NETWORK = NETWORKS.MAINNET;\n\ntype Network = $Values<typeof NETWORKS>;\n\nconst LATEST_VERSION = 2;\n\nconst CONTRACTS_MANIFEST = {\n  versioned: {\n    '1': [\n      'EtherRouter',\n      'IColony',\n      'IColonyNetwork',\n      'IMetaColony',\n      'IRecovery',\n      'ITokenLocking',\n      'OldRoles',\n      'OldRolesFactory',\n      'OneTxPayment',\n      'OneTxPaymentFactory',\n      'Token',\n      'TokenAuthority',\n    ],\n    '2': [\n      'EtherRouter',\n      'IColony',\n      'IColonyNetwork',\n      'IMetaColony',\n      'IRecovery',\n      'ITokenLocking',\n      'OldRoles',\n      'OldRolesFactory',\n      'OneTxPayment',\n      'OneTxPaymentFactory',\n      'Token',\n      'TokenAuthority',\n    ],\n  },\n};\n\nconst VERSIONED_CONTRACTS = Object.entries(CONTRACTS_MANIFEST.versioned).reduce(\n  (versionedContracts, [version, contractNames]) =>\n    Object.assign(versionedContracts, {\n      [version]: contractNames.reduce(\n        (contracts, contractName) =>\n          Object.assign(contracts, {\n            // eslint-disable-next-line global-require, import/no-dynamic-require, max-len\n            [contractName]: require(`../contracts/versioned/v${version}/${contractName}.json`),\n          }),\n        {},\n      ),\n    }),\n  {},\n);\n\nclass NetworkLoader extends ContractLoader {\n  _network: ?Network;\n\n  constructor({ network = DEFAULT_NETWORK }: { network: Network } = {}) {\n    super({ transform: truffleTransform });\n    this._network = network;\n  }\n\n  async _load(query: Object = {}, requiredProps?: RequiredContractProps) {\n    const network = this._network || DEFAULT_NETWORK;\n\n    const { contractName = '', version = LATEST_VERSION } = query;\n    const networkQuery = Object.assign({}, query, { network });\n\n    assert(!!contractName, 'A `contractName` option must be provided');\n    assert(!!version, 'A valid `version` option must be provided');\n\n    const contract =\n      VERSIONED_CONTRACTS[version] &&\n      VERSIONED_CONTRACTS[version][contractName];\n\n    if (contract) return this._transform(contract, networkQuery, requiredProps);\n\n    throw new Error(\n      // eslint-disable-next-line max-len\n      `Contract ${contractName} with version ${version} not found on ${network}`,\n    );\n  }\n}\n\nmodule.exports = NetworkLoader;\n"]}
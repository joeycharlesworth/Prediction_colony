'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _colonyJsContractLoader = require('@colony/colony-js-contract-loader');

var _colonyJsContractLoader2 = _interopRequireDefault(_colonyJsContractLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NETWORKS = {
  GOERLI: 'goerli',
  MAINNET: 'mainnet'
};

var DEFAULT_NETWORK = NETWORKS.MAINNET;

var LATEST_VERSION = 2;

var CONTRACTS_MANIFEST = {
  versioned: {
    '1': ['EtherRouter', 'IColony', 'IColonyNetwork', 'IMetaColony', 'IRecovery', 'ITokenLocking', 'OldRoles', 'OldRolesFactory', 'OneTxPayment', 'OneTxPaymentFactory', 'Token', 'TokenAuthority'],
    '2': ['EtherRouter', 'IColony', 'IColonyNetwork', 'IMetaColony', 'IRecovery', 'ITokenLocking', 'OldRoles', 'OldRolesFactory', 'OneTxPayment', 'OneTxPaymentFactory', 'Token', 'TokenAuthority']
  }
};

var VERSIONED_CONTRACTS = Object.entries(CONTRACTS_MANIFEST.versioned).reduce(function (versionedContracts, _ref) {
  var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
      version = _ref2[0],
      contractNames = _ref2[1];

  return Object.assign(versionedContracts, (0, _defineProperty3.default)({}, version, contractNames.reduce(function (contracts, contractName) {
    return Object.assign(contracts, (0, _defineProperty3.default)({}, contractName, require('../contracts/versioned/v' + version + '/' + contractName + '.json')));
  }, {})));
}, {});

var NetworkLoader = function (_ContractLoader) {
  (0, _inherits3.default)(NetworkLoader, _ContractLoader);

  function NetworkLoader() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$network = _ref3.network,
        network = _ref3$network === undefined ? DEFAULT_NETWORK : _ref3$network;

    (0, _classCallCheck3.default)(this, NetworkLoader);

    var _this = (0, _possibleConstructorReturn3.default)(this, (NetworkLoader.__proto__ || Object.getPrototypeOf(NetworkLoader)).call(this, { transform: _colonyJsContractLoader.truffleTransform }));

    _this._network = network;
    return _this;
  }

  (0, _createClass3.default)(NetworkLoader, [{
    key: '_load',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var requiredProps = arguments[1];

        var network, _query$contractName, contractName, _query$version, version, networkQuery, contract;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                network = this._network || DEFAULT_NETWORK;
                _query$contractName = query.contractName, contractName = _query$contractName === undefined ? '' : _query$contractName, _query$version = query.version, version = _query$version === undefined ? LATEST_VERSION : _query$version;
                networkQuery = Object.assign({}, query, { network: network });


                (0, _assert2.default)(!!contractName, 'A `contractName` option must be provided');
                (0, _assert2.default)(!!version, 'A valid `version` option must be provided');

                contract = VERSIONED_CONTRACTS[version] && VERSIONED_CONTRACTS[version][contractName];

                if (!contract) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt('return', this._transform(contract, networkQuery, requiredProps));

              case 8:
                throw new Error(
                // eslint-disable-next-line max-len
                'Contract ' + contractName + ' with version ' + version + ' not found on ' + network);

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _load() {
        return _ref4.apply(this, arguments);
      }

      return _load;
    }()
  }]);
  return NetworkLoader;
}(_colonyJsContractLoader2.default);

module.exports = NetworkLoader;
//# sourceMappingURL=NetworkLoader.js.map
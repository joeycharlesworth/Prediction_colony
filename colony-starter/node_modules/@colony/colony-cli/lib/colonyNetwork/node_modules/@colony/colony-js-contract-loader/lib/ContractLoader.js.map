{"version":3,"sources":["../src/ContractLoader.js"],"names":["assert","require","validateField","assertion","field","ContractLoader","inputObj","query","requiredProps","contractDef","Object","getOwnPropertyNames","length","address","abi","bytecode","Array","isArray","transform","constructor","defaultTransform","_transform","Error","DEFAULT_REQUIRED_CONTRACT_PROPS","contractName","contractAddress","routerName","routerAddress","otherQuery","TypeError","firstQuery","_load","result","JSON","stringify","routerContract","validateContractDefinition"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;AAEA,IAAMA,SAASC,QAAQ,QAAR,CAAf;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,KAAZ;AAAA,SACpBJ,OACEG,SADF,oCAEkCC,KAFlC,4BADoB;AAAA,CAAtB;;IAMqBC,c;;;;;AAKnB;;;;uCAIqC;AACnC;AACA,aAAO,UACLC,QADK,EAELC,KAFK,EAGLC,aAHK;AAAA,eAIFF,QAJE;AAAA,OAAP;AAKA;AACD;;;+CAGCG,W,EACAD,a,EACS;AACTR,aACEU,OAAOC,mBAAP,CAA2BF,WAA3B,EAAwCG,MAAxC,GAAiD,CADnD,EAEE,6BAFF;;AADS,UAMDC,OANC,GAMgBJ,WANhB,CAMDI,OANC;AAAA,UAMQC,GANR,GAMgBL,WANhB,CAMQK,GANR;;;AAQT,UAAIN,cAAcK,OAAlB,EACEX,cACE,OAAOW,OAAP,KAAmB,QAAnB,IAA+BA,QAAQD,MAAR,GAAiB,CADlD,EAEE,SAFF;;AAKF,UAAIJ,cAAcO,QAAlB,EACEb,cACE,OAAOO,YAAYM,QAAnB,KAAgC,QAAhC,IACEN,YAAYM,QAAZ,CAAqBH,MAArB,GAA8B,CAFlC,EAGE,UAHF;;AAMF,UAAIJ,cAAcM,GAAlB,EACEZ,cAAcc,MAAMC,OAAN,CAAcH,GAAd,KAAsBA,IAAIF,MAAJ,GAAa,CAAjD,EAAoD,KAApD;;AAEF,aAAO,IAAP;AACD;;;AAED,4BAEyB;AAAA,mFAAJ,EAAI;AAAA,8BADvBM,SACuB;AAAA,QADvBA,SACuB,kCADX,KAAKC,WAAL,CAAiBC,gBAAjB,EACW;;AAAA;;AACvBpB,WACE,OAAOkB,SAAP,KAAqB,UADvB,EAEE,yCAFF;AAIA,SAAKG,UAAL,GAAkBH,SAAlB;AACD;;AAED;;;;;;4GAEEX,K,EACAC,a;;;;;sBAEM,IAAIc,KAAJ,CACJ,qEADI,C;;;;;;;;;;;;;;;;;AAKR;;;;;6GAEEf,K;YACAC,a,uEAAwCe,yC;;;;;;AAGtCC,4B,GAKEjB,K,CALFiB,Y,EACAC,e,GAIElB,K,CAJFkB,e,EACAC,U,GAGEnB,K,CAHFmB,U,EACAC,a,GAEEpB,K,CAFFoB,a,EACGC,U,0CACDrB,K;;oBAEEiB,gBAAgBC,e;;;;;sBACd,IAAII,SAAJ,CACJ,gEADI,C;;;;AAIR;AACMC,0B,8BACAN,eAAe,EAAEA,0BAAF,EAAf,GAAkC,EAAEC,gCAAF,E,EACnCG,U;;uBAEgB,KAAKG,KAAL,CAAWD,UAAX,EAAuBtB,aAAvB,C;;;AAAfwB,sB;;sBAEFA,UAAU,I;;;;;sBACN,IAAIV,KAAJ,0CACmCW,KAAKC,SAAL,CAAeJ,UAAf,CADnC,O;;;qBAIJL,e;;;;;AACF;AACAO,uBAAOnB,OAAP,GAAiBY,eAAjB;;;;;qBACSE,a;;;;;AACT;AACAK,uBAAOnB,OAAP,GAAiBc,aAAjB;;;;;qBACSD,U;;;;;;uBAEoB,KAAKK,KAAL,4BAEtBH,UAFsB;AAGzBJ,gCAAcE;AAHW,oBAK3BlB,aAL2B,C;;;AAAvB2B,8B;;AAON,oBAAIA,kBAAkB,IAAtB,EAA4BH,OAAOnB,OAAP,GAAiBsB,eAAetB,OAAhC;;;;AAG9B,qBAAKM,WAAL,CAAiBiB,0BAAjB,CAA4CJ,MAA5C,EAAoDxB,aAApD;;kDAEOwB,M;;;;;;;;;;;;;;;;;;;;kBAvHU3B,c","file":"ContractLoader.js","sourcesContent":["/* @flow */\n\nimport type {\n  ContractDefinition,\n  ConstructorArgs,\n  Transform,\n  RequiredContractProps,\n  Query,\n} from './interface/ContractLoader';\n\nimport { DEFAULT_REQUIRED_CONTRACT_PROPS } from './defaults';\n\nconst assert = require('assert');\n\nconst validateField = (assertion, field) =>\n  assert(\n    assertion,\n    `Invalid contract definition: ${field} is missing or invalid`,\n  );\n\nexport default class ContractLoader {\n  _network: ?string;\n\n  _transform: Transform;\n\n  /**\n   * The default `transform` function is simply returns the input object as the\n   * default behaviour.\n   */\n  static defaultTransform(): Transform {\n    /* eslint-disable no-unused-vars */\n    return (\n      inputObj: any,\n      query?: Query,\n      requiredProps?: RequiredContractProps,\n    ) => inputObj;\n    /* eslint-enable no-unused-vars */\n  }\n\n  static validateContractDefinition(\n    contractDef: ContractDefinition,\n    requiredProps: RequiredContractProps,\n  ): boolean {\n    assert(\n      Object.getOwnPropertyNames(contractDef).length > 0,\n      'Missing contract definition',\n    );\n\n    const { address, abi } = contractDef;\n\n    if (requiredProps.address)\n      validateField(\n        typeof address === 'string' && address.length > 0,\n        'address',\n      );\n\n    if (requiredProps.bytecode)\n      validateField(\n        typeof contractDef.bytecode === 'string' &&\n          contractDef.bytecode.length > 0,\n        'bytecode',\n      );\n\n    if (requiredProps.abi)\n      validateField(Array.isArray(abi) && abi.length > 0, 'abi');\n\n    return true;\n  }\n\n  constructor({\n    transform = this.constructor.defaultTransform(),\n  }: ConstructorArgs = {}) {\n    assert(\n      typeof transform === 'function',\n      'A `transform` function must be provided',\n    );\n    this._transform = transform;\n  }\n\n  /* eslint-disable class-methods-use-this,no-unused-vars */\n  async _load(\n    query: Query,\n    requiredProps?: RequiredContractProps, // eslint-disable-line no-unused-vars\n  ): Promise<?ContractDefinition> {\n    throw new Error(\n      'ContractLoader._load() is expected to be defined in a derived class',\n    );\n  }\n\n  /* eslint-enable class-methods-use-this,no-unused-vars */\n  async load(\n    query: Query,\n    requiredProps?: RequiredContractProps = DEFAULT_REQUIRED_CONTRACT_PROPS,\n  ): Promise<ContractDefinition> {\n    const {\n      contractName,\n      contractAddress,\n      routerName,\n      routerAddress,\n      ...otherQuery\n    } = query;\n\n    if (!(contractName || contractAddress))\n      throw new TypeError(\n        'The field `contractName` or `contractAddress` must be supplied',\n      );\n\n    // Load the contract definition by either the contract name or address\n    const firstQuery = {\n      ...(contractName ? { contractName } : { contractAddress }),\n      ...otherQuery,\n    };\n    const result = await this._load(firstQuery, requiredProps);\n\n    if (result == null)\n      throw new Error(\n        `Unable to load contract definition (${JSON.stringify(firstQuery)})`,\n      );\n\n    if (contractAddress) {\n      // If we have a specific contractAddress, set it directly.\n      result.address = contractAddress;\n    } else if (routerAddress) {\n      // If we have the router address, set it directly.\n      result.address = routerAddress;\n    } else if (routerName) {\n      // If we have the router name, look it up for the router address.\n      const routerContract = await this._load(\n        {\n          ...otherQuery,\n          contractName: routerName,\n        },\n        requiredProps,\n      );\n      if (routerContract != null) result.address = routerContract.address;\n    }\n\n    this.constructor.validateContractDefinition(result, requiredProps);\n\n    return result;\n  }\n}\n"]}